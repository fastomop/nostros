import sqlglot
import re
import os

def transpile_redshift_to_postgres(redshift_sql: str) -> str:
    """Transpile a single SQL query from Redshift to PostgreSQL."""
    try:
        # Preprocess the SQL to handle custom functions that sqlglot might not catch
        preprocessed_sql = preprocess_sql_for_postgres(redshift_sql)
        
        postgres_sql = sqlglot.transpile(
            preprocessed_sql,
            read='redshift',
            write='postgres',
            error_level='ignore'  # Skip unsupported syntax without raising exceptions
        )[0]
        
        # Post-process to handle any remaining issues
        postgres_sql = postprocess_sql_for_postgres(postgres_sql)
        
        return postgres_sql
    except Exception as e:
        return f"Error transpiling SQL: {e}"

def preprocess_sql_for_postgres(sql: str) -> str:
    """Preprocess SQL to handle functions that need manual conversion."""
    # Convert DATE_PART_YEAR to EXTRACT(YEAR FROM ...)
    sql = re.sub(r'DATE_PART_YEAR\s*\(\s*([^)]+)\s*\)', r'EXTRACT(YEAR FROM \1)', sql, flags=re.IGNORECASE)
    return sql

def postprocess_sql_for_postgres(sql: str) -> str:
    """Post-process transpiled SQL to fix any remaining issues."""
    # Additional post-processing can be added here if needed
    return sql

def extract_sql_queries(file_content: str) -> list:
    """Extract SQL queries from the rendered_queries.sql file."""
    queries = []
    
    # Split by the separator line
    sections = file_content.split('--------------------------------------------------------------------------------')
    
    for section in sections:
        if not section.strip():
            continue
            
        lines = section.strip().split('\n')
        sql_lines = []
        capture_sql = False
        query_id = None
        status = None
        original_template = None
        required_args = None
        
        for line in lines:
            line = line.strip()
            
            # Extract metadata
            if line.startswith('-- Query ID:'):
                query_id = line.replace('-- Query ID:', '').strip()
            elif line.startswith('-- Status:'):
                status = line.replace('-- Status:', '').strip()
            elif line.startswith('-- Original Template:'):
                original_template = line.replace('-- Original Template:', '').strip()
            elif line.startswith('-- Required Arguments:'):
                required_args = line.replace('-- Required Arguments:', '').strip()
            elif line.startswith('--') or line == '':
                continue
            else:
                # This should be the actual SQL query
                sql_lines.append(line)
        
        if sql_lines and query_id:
            sql_query = ' '.join(sql_lines)
            queries.append({
                'id': query_id,
                'status': status,
                'original_template': original_template,
                'required_args': required_args,
                'sql': sql_query
            })
    
    return queries

def transpile_queries_file():
    """Read rendered_queries.sql, transpile to PostgreSQL, and save to rendered_queries_postgres.sql."""
    input_file = os.path.join('output', 'rendered_queries.sql')
    output_file = os.path.join('output', 'rendered_queries_postgres.sql')
    
    # Ensure output directory exists
    os.makedirs('output', exist_ok=True)
    
    if not os.path.exists(input_file):
        print(f"Error: {input_file} not found!")
        return
    
    try:
        # Read the input file
        with open(input_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Extract queries
        queries = extract_sql_queries(content)
        print(f"Found {len(queries)} queries to transpile")
        
        # Transpile each query
        transpiled_content = []
        transpiled_content.append("-- Transpiled PostgreSQL Queries from rendered_queries.sql")
        transpiled_content.append("-- Generated by NOSTROS SQL transpiler using sqlglot")
        transpiled_content.append("")
        
        for query in queries:
            transpiled_content.append(f"-- Query ID: {query['id']}")
            transpiled_content.append(f"-- Status: {query['status']}")
            if query['original_template']:
                transpiled_content.append(f"-- Original Template:")
                transpiled_content.append(f"-- {query['original_template']}")
            if query['required_args']:
                transpiled_content.append(f"-- Required Arguments: {query['required_args']}")
            
            # Transpile the SQL
            transpiled_sql = transpile_redshift_to_postgres(query['sql'])
            
            if transpiled_sql.startswith("Error"):
                transpiled_content.append(f"-- Transpilation Error: {transpiled_sql}")
                transpiled_content.append(f"-- Original SQL: {query['sql']}")
            else:
                transpiled_content.append(transpiled_sql + ";")
            
            transpiled_content.append("")
            transpiled_content.append("--------------------------------------------------------------------------------")
            transpiled_content.append("")
        
        # Write to output file
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(transpiled_content))
        
        print(f"Successfully transpiled queries and saved to {output_file}")
        
    except Exception as e:
        print(f"Error processing files: {e}")

# Run the transpilation
if __name__ == "__main__":
    transpile_queries_file()
